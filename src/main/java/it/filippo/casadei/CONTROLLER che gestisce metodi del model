package it.filippo.casadei.controller;

import it.filippo.casadei.model.*;
import it.filippo.casadei.view.BriscolaView;
import it.filippo.casadei.view.BriscolaViewObserver;
import it.filippo.casadei.view.GuiBriscolaViewImpl;


import java.util.*;

// TODO: DECIDERE SE UTILIZZARE OBSERVER O NO

/**
 * Controller per gestire il flusso di una partita di Briscola 1vs1.
 * Si appoggia a un'interfaccia GameView per tutte le interazioni con l'utente (console, GUI, ecc.).
 */

public class BriscolaController implements BriscolaViewObserver {
    private final BriscolaGame model;
    private final BriscolaView view;
    private final Player player1;
    private final Player player2;
    private final Card briscolaCard;
    private final Suit briscolaSuit;
    private boolean isBriscolaDrawn = false;

    public BriscolaController(BriscolaView view, Player player1, Player player2) {
        this.view = view;
        this.player1 = player1;
        this.player2 = player2;
        this.model = new BriscolaGame(player1, player2, Deck.createDeck(), new Table());

        // Mescola e distribuisce inizialmente 3 carte a ciascun giocatore
        setupGame();

        // Determina la briscola estraendo la prossima carta dal mazzo
        this.briscolaCard = model.getDeck().draw();
        this.briscolaSuit = briscolaCard.getSuit();
        model.setBriscola(briscolaCard);
        view.showBriscola(briscolaCard);

        // Imposta come ordine iniziale prima player1 e poi player2 TODO: posso eliminare il campo e usare solamente il campo di Table settandolo inizialmente come player1 e second come player2
        model.getTable().setPlayersOrder(player1, player2);

        // Sceglie quale view utilizzare in base all'istanza in runtime dell'interfaccia view
        if (view instanceof GuiBriscolaViewImpl gui) {
            gui.start(this);
        } else {
            startGame();
        }
    }

    private void setupGame() {
        Deck deck = model.getDeck();
        deck.shuffle();
        for (int i = 0; i < Hand.MAX_CARDS_IN_HAND; i++) {
            player1.addCardToHand(deck.draw());
            player2.addCardToHand(deck.draw());
        }
    }

    public void startGame() {
        while (!isGameOver()) {
            playTurn();
            evaluateHand();
            drawCards();
            model.getTable().clear();
        }
        endGame();
    }

    private void playTurn() {
        Table table = model.getTable();
        Player firstPlayer = table.getFirstPlayer();
        Player secondPlayer = table.getSecondPlayer();

        // Primo giocatore sceglie la carta
        Card card1 = (firstPlayer instanceof Cpu)
                ? ((Cpu) firstPlayer).chooseCard(model)
                : view.requestCard(firstPlayer);

        // Primo giocatore gioca la carta e aggiorna il model e la view
        firstPlayer.playCard(card1);
        model.registerPlayedCard(card1);
        table.playCard(firstPlayer, card1);
        view.showPlayedCard(firstPlayer, card1);

        // Secondo giocatore sceglie la carta
        Card card2 = (secondPlayer instanceof Cpu)
                ? ((Cpu) secondPlayer).chooseCard(model)
                : view.requestCard(secondPlayer);

        // Secondo giocatore gioca la carta e aggiorna il model e la view
        secondPlayer.playCard(card2);
        model.registerPlayedCard(card2);
        table.playCard(secondPlayer, card2);
        view.showPlayedCard(secondPlayer, card2);
    }

    private void evaluateHand() {
        Table table = model.getTable();
        Player firstPlayer = table.getFirstPlayer();
        Player secondPlayer = table.getSecondPlayer();

        // Prende la prima e seconda carta giocata
        Card firstCard = table.getCardPlayedBy(firstPlayer);
        Card secondCard = table.getCardPlayedBy(secondPlayer);

        // Determina il vincitore della mano di gioco
        int winIdx = GameRules.compareCards(firstCard, secondCard, briscolaSuit);
        Player winner = (winIdx == 0) ? firstPlayer : secondPlayer;

        // Aggiunge i punti al giocatore che ha vinto la mano di gioco
        int points = GameRules.calculatePointsWon(firstCard, secondCard);
        winner.addPoints(points);

        // Il vincitore gioca per primo il turno successivo e il perdente per secondo
        table.setPlayersOrder(winner, model.getOpponent(winner));

        // Aggiorna la view
        view.showHandResult(table.getPlayOrder(), winner, points);
    }

    private void drawCards() {
        Deck deck = model.getDeck();
        Table table = model.getTable();
        Player firstPlayer = table.getFirstPlayer();
        Player secondPlayer = table.getSecondPlayer();

        Player[] order = {firstPlayer, secondPlayer};

        for (Player p : order) {
            if (!deck.isEmpty()) {
                Card drawn = deck.draw();
                p.addCardToHand(drawn);
                view.showDraw(p, drawn);
            } else if (!isBriscolaDrawn) {
                isBriscolaDrawn = true;
                p.addCardToHand(briscolaCard);
                view.showDraw(p, briscolaCard);
            }
        }
    }

    private boolean isGameOver() {
        return model.getDeck().isEmpty()
                && player1.getHand().isEmpty()
                && player2.getHand().isEmpty();
    }

    private void endGame() {
        Map<Player, Integer> scores = new LinkedHashMap<>();
        scores.put(player1, player1.getPoints());
        scores.put(player2, player2.getPoints());

        view.showFinalScores(scores);
        Player champion = (player1.getPoints() > player2.getPoints()) ? player1 : player2;
        view.showWinner(champion);
    }

    /**
     * @param player
     * @param card
     */
    @Override
    public void onCardChosen(Player player, Card card) {
        // aggiorna model mettendo la carta nel table come prima o seconda (in base a posizione user)
        // Se è il primo giocatore aggiunge la carta al table, fa pescare il secondo, da i risultati e va al turno successivo
        // Se è il secondo giocatore aggiunge la carta al table, da i risultati e va al turno successivo
        // aggiorna view facendo vedere che la carta viene giocata
    }

//    playTurn() {
//        fa pescare il primo e il secondo giocatore
//                se il primo giocatore è la cpu gli fa scegliere e giocare la carta
//                ???
//    }

    /**
     *
     */
    @Override
    public void onNextTurn() {
        // aggiorna model andando al turno successivo (pesca oppure gioca oppure fine partita)
        // nella view non succede nulla
    }

    /**
     *
     */
    @Override
    public void onQuit() {
        // chiudi app
    }

    public void playTurn1() {

    }
}

//private void playTurn() {
//    Table table = model.getTable();
//    Player firstPlayer = table.getFirstPlayer();
//    Player secondPlayer = table.getSecondPlayer();
//
//    // Primo giocatore sceglie la carta
//    Card card1 = (firstPlayer instanceof Cpu)
//            ? ((Cpu) firstPlayer).chooseCard(model)
//            : view.requestCard(firstPlayer);
//
//    // Primo giocatore gioca la carta e aggiorna il model e la view
//    firstPlayer.playCard(card1);
//    model.registerPlayedCard(card1);
//    table.playCard(firstPlayer, card1);
//    view.showPlayedCard(firstPlayer, card1);
//
//    // Secondo giocatore sceglie la carta
//    Card card2 = (secondPlayer instanceof Cpu)
//            ? ((Cpu) secondPlayer).chooseCard(model)
//            : view.requestCard(secondPlayer);
//
//    // Secondo giocatore gioca la carta e aggiorna il model e la view
//    secondPlayer.playCard(card2);
//    model.registerPlayedCard(card2);
//    table.playCard(secondPlayer, card2);
//    view.showPlayedCard(secondPlayer, card2);
//}

//public void startGame() {
//    while (!isGameOver()) {
//        playTurn();
//        evaluateHand();
//        drawCards();
//        model.getTable().clear();
//    }
//    endGame();
//}