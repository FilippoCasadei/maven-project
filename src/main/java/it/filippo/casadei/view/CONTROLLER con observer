package view;

import model.Card;
import model.Player;
import java.util.List;
import java.util.Map;

/**
 * Interfaccia per la View nel gioco di Briscola 1vs1.
 * Segue pattern MVC + Observer: la View notifica eventi al Controller,
 * ed espone metodi pubblici per essere aggiornata dal Controller.
 */
public interface GameView {
    /** Imposta l'observer (Controller) che riceve gli eventi utente. */
    void setObserver(GameViewObserver observer);

    /** Rende visibile la View e avvia il gioco. */
    void start();

    /** Mostra la carta di briscola estratta all'inizio. */
    void showBriscola(Card briscola);

    /** Richiede all'utente di scegliere una carta (il Controller riceverà l'evento). */
    void requestCard(Player player);

    /** Mostra la carta giocata da un giocatore. */
    void showPlayedCard(Player player, Card card);

    /** Mostra il risultato della mano: ordine, vincitore e punti. */
    void showHandResult(List<Map.Entry<Player, Card>> order,
                         Player winner, int points);

    /** Indica il passaggio al turno successivo (es. mostra un prompt). */
    void nextTurn(Player player);

    /** Mostra quale carta è stata pescata da un giocatore. */
    void showDraw(Player player, Card card);

    /** Mostra i punteggi finali di tutti i giocatori. */
    void showFinalScores(Map<Player, Integer> scores);

    /** Mostra il vincitore della partita. */
    void showWinner(Player champion);

    /** Ripristina lo stato della View per una nuova partita. */
    void reset();
}

// -----------------------------------------------------------------------------

package view;

import model.Card;
import model.Player;
import java.awt.*;
import java.awt.event.*;
import java.util.List;
import java.util.Map;
import javax.swing.*;

public class GuiGameViewImpl extends JFrame implements GameView {
    private GameViewObserver observer;
    private JPanel boardPanel;
    private JPanel handPanel;
    private JLabel briscolaLabel;
    private JButton resetButton, quitButton;

    public GuiGameViewImpl() {
        super("Briscola 1vs1");
        setDefaultCloseOperation(EXIT_ON_CLOSE);
        setSize(600, 400);
        setLayout(new BorderLayout());

        // Nord: mostra briscola
        briscolaLabel = new JLabel();
        add(briscolaLabel, BorderLayout.NORTH);

        // Centro: tavolo di gioco
        boardPanel = new JPanel(new GridLayout(1, 2));
        add(boardPanel, BorderLayout.CENTER);

        // Sud: pannello mano e comandi
        handPanel = new JPanel();
        add(handPanel, BorderLayout.SOUTH);

        // Pulsanti generali
        JPanel control = new JPanel(new FlowLayout(FlowLayout.RIGHT));
        resetButton = new JButton("Reset");
        quitButton  = new JButton("Quit");
        control.add(resetButton);
        control.add(quitButton);
        add(control, BorderLayout.SOUTH);

        // ActionListener per reset e quit
        resetButton.addActionListener(e -> observer.onReset());
        quitButton.addActionListener(e -> observer.onQuit());
    }

    @Override
    public void setObserver(GameViewObserver observer) {
        this.observer = observer;
    }

    @Override
    public void start() {
        setVisible(true);
    }

    @Override
    public void showBriscola(Card briscola) {
        briscolaLabel.setIcon(new ImageIcon( /* carica immagine da Card */ ));
    }

    @Override
    public void requestCard(Player player) {
        handPanel.removeAll();
        List<Card> hand = player.getHand();
        for (Card c : hand) {
            JButton btn = new JButton(new ImageIcon(/* immagine di c */));
            btn.addActionListener(e -> {
                observer.onCardChosen(player, c);
            });
            handPanel.add(btn);
        }
        handPanel.revalidate();
        handPanel.repaint();
    }

    @Override
    public void showPlayedCard(Player player, Card card) {
        // aggiungi un JLabel con l'immagine della carta su boardPanel
        boardPanel.add(new JLabel(new ImageIcon(/* immagine di card */)));
        boardPanel.revalidate();
    }

    @Override
    public void showHandResult(List<Map.Entry<Player, Card>> order,
                               Player winner, int points) {
        String msg = String.format("Vince %s con %d punti", winner.getName(), points);
        JOptionPane.showMessageDialog(this, msg);
    }

    @Override
    public void nextTurn(Player player) {
        JOptionPane.showMessageDialog(this, "Turno di " + player.getName());
    }

    @Override
    public void showDraw(Player player, Card card) {
        JOptionPane.showMessageDialog(this,
            player.getName() + " ha pescato " + card);
    }

    @Override
    public void showFinalScores(Map<Player, Integer> scores) {
        StringBuilder sb = new StringBuilder();
        scores.forEach((p,pts) -> sb.append(p.getName()).append(": ").append(pts).append("\n"));
        JOptionPane.showMessageDialog(this, sb.toString(), "Punteggi finali", JOptionPane.INFORMATION_MESSAGE);
    }

    @Override
    public void showWinner(Player champion) {
        JOptionPane.showMessageDialog(this, "Il vincitore è: " + champion.getName());
    }

    @Override
    public void reset() {
        boardPanel.removeAll();
        handPanel.removeAll();
        briscolaLabel.setIcon(null);
        repaint();
    }
}

###########################################################################################################
###########################################################################################################

// File: controller/GameViewObserver.java
package controller;

import model.Card;
import model.Player;

/**
 * Interfaccia che definisce gli eventi inviati dalla View al Controller.
 */
public interface GameViewObserver {
    /** Evento: l'utente ha scelto una carta da giocare */
    void onCardChosen(Player player, Card card);

    /** Evento: inizializza o resetta la partita */
    void onReset();

    /** Evento: l'utente vuole uscire dal gioco */
    void onQuit();
}


// -----------------------------------------------------------------------------
// File: model/GameModel.java
package model;

import model.Card;
import model.Player;
import java.util.List;
import java.util.Map;

/**
 * Interfaccia per il Model del gioco.
 * Definisce le operazioni principali necessarie al Controller.
 */
public interface GameModel {
    void initializeGame();
    Card getBriscola();
    List<Card> getHand(Player player);
    void playCard(Player player, Card card);
    List<Map.Entry<Player, Card>> evaluateHand();
    int getPoints(Player winner);
    Card drawCard(Player player);
    Map<Player, Integer> getFinalScores();
    Player determineWinner();
    Player getCurrentPlayer();
    void nextTurn();
}


// -----------------------------------------------------------------------------
// File: controller/GameController.java
package controller;

import model.GameModel;
import view.GameView;
import model.Card;
import model.Player;

/**
 * Controller che media la comunicazione tra View e Model seguendo MVC + Observer.
 */
public class GameController implements GameViewObserver {
    private final GameView view;
    private final GameModel model;

    public GameController(GameView view, GameModel model) {
        this.view = view;
        this.model = model;
        this.view.setObserver(this);
    }

    /** Avvia la partita: inizializza Model e aggiorna View */
    public void startGame() {
        model.initializeGame();
        view.start();
        view.showBriscola(model.getBriscola());
        view.requestCard(model.getCurrentPlayer());
    }

    @Override
    public void onCardChosen(Player player, Card card) {
        // 1) Aggiorna il model
        model.playCard(player, card);
        // 2) Mostra la carta giocata
        view.showPlayedCard(player, card);

        // 3) Se entrambe le carte giocate, valuta esito mano
        if (/* entrambi hanno giocato */) {
            var order = model.evaluateHand();
            Player winner = order.get(0).getKey();
            int points  = model.getPoints(winner);
            view.showHandResult(order, winner, points);

            // pesca e mostra
            for (Player p : List.of(/* player1, player2 */)) {
                Card drawn = model.drawCard(p);
                view.showDraw(p, drawn);
            }

            // turno successivo
            model.nextTurn();
            view.nextTurn(model.getCurrentPlayer());
            view.requestCard(model.getCurrentPlayer());
        }
    }

    @Override
    public void onReset() {
        model.initializeGame();
        view.reset();
        startGame();
    }

    @Override
    public void onQuit() {
        // chiusura applicazione
        System.exit(0);
    }
}
