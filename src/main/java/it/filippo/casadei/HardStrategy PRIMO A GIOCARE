package it.filippo.casadei.model;

import java.util.Comparator;
import java.util.List;
import java.util.Optional;
import java.util.Random;

public class HardStrategy implements CpuStrategy {

    // TODO: Scegliere se usare HIGH_POINTS oppure il metodo isCarico/isHighPointCard
    private static final int HIGH_POINTS = 10;
    private Memory memory;
    private final Random random = new Random();

    // == STILE DI GIOCO ==
    // TODO: Aggiungi note su stile di gioco

    @Override
    public Card chooseCard(Cpu cpu, BriscolaGame game) {
        // Aggiorno subito la memoria
        updateMemory(cpu, game);

        Table table = game.getTable();
        Hand hand = cpu.getHand();
        Suit briscolaSuit = game.getBriscola().getSuit();

        // Caso: Primo a giocare
        if (table.getFirstPlayer().equals(cpu)) {
            // 1) Alta non carico, non briscola, seme con due carichi usciti
            Optional<Card> chosen = hand.getCards().stream()
                    .filter(c -> !c.getSuit().equals(briscolaSuit))
                    .filter(c -> !isCarico(c))
                    .filter(c -> carichiOut(c.getSuit(), memory.getRemainingCards()) >= 2)
                    .max(Comparator.comparingInt(Card::getPoints));
            if (chosen.isPresent()) return chosen.get();

            // 2) Alta non carico, non briscola, seme con un carico uscito
            chosen = hand.getCards().stream()
                    .filter(c -> !c.getSuit().equals(briscolaSuit))
                    .filter(c -> !isCarico(c))
                    .filter(c -> carichiOut(c.getSuit(), memory.getRemainingCards()) >= 1)
                    .max(Comparator.comparingInt(Card::getPoints));
            if (chosen.isPresent()) return chosen.get();

            // 3) Alta non carico, non briscola
            chosen = hand.getCards().stream()
                    .filter(c -> !c.getSuit().equals(briscolaSuit))
                    .filter(c -> !isCarico(c))
                    .max(Comparator.comparingInt(Card::getPoints));
            if (chosen.isPresent()) return chosen.get();

            // 4) Bassa di briscola, tranne il 3 se l'asso di briscola è rimasto
            boolean acePresent = memory.getRemainingCards().stream()
                    .anyMatch(c -> c.getSuit().equals(briscolaSuit) && c.getRank().equals(Rank.ACE));
            chosen = hand.getCards().stream()
                    .filter(c -> c.getSuit().equals(briscolaSuit))
                    .filter(c -> c.getPoints() < HIGH_POINTS)
                    .filter(c -> !(c.getRank().equals(Rank.THREE) && acePresent))
                    .min(Comparator.comparingInt(Card::getPoints));
            if (chosen.isPresent()) return chosen.get();

            // 5) Un carico: se è uscito l'asso del seme gioca 3, altrimenti asso, altrimenti 3 a caso
            // Cerco seme con asso uscito
            List<Card> carichi = hand.getCards().stream()
                    .filter(this::isCarico)
                    .toList();
            // Priorità per ciascuna carta in mano
            Optional<Card> chargePlay = carichi.stream()
                    .filter(c -> c.getRank().equals(Rank.THREE)
                            && memory.getRemainingCards().stream()
                            .noneMatch(r -> r.getSuit().equals(c.getSuit()) && r.getRank().equals(Rank.ACE)))
                    .findAny();
            if (chargePlay.isEmpty()) {
                chargePlay = carichi.stream()
                        .filter(c -> c.getRank().equals(Rank.ACE))
                        .findAny();
            }
            if (chargePlay.isEmpty() && !carichi.isEmpty()) {
                chargePlay = Optional.of(carichi.get(random.nextInt(carichi.size())));
            }
            if (chargePlay.isPresent()) return chargePlay.get();
        }

        // TODO: Altri casi (secondo a giocare)
        throw new RuntimeException("HardStrategy: no card chosen");
    }

    // Aggiorna la memoria della cpu sulla partita in corso
    private void updateMemory(Cpu cpu, BriscolaGame game) {
        Player opponent = game.getOpponent(cpu);

        // Aggiorna i punti miei e dell'avversario
        memory.setMyPoints(cpu.getPoints());
        memory.setOpponentPoints(opponent.getPoints());

        // Aggiorna le carte che non conosco (mazzo + mano avversario)
        List<Card> remaining = game.getDeck().getCards();
        remaining.addAll(opponent.getHand().getCards());
        memory.setRemainingCards(remaining);
    }

    // Ritorna true se la carta è carico (Asso o 3)
    private boolean isCarico(Card c) {
        return c.getRank().equals(Rank.ACE) || c.getRank().equals(Rank.THREE);
    }

    // Conta quanti carichi di un seme sono già usciti
    private int carichiOut(Suit suit, List<Card> remaining) {
        int totalCarichi = 2; // Asso e 3
        long remainingCarichi = remaining.stream()
                .filter(c -> c.getSuit().equals(suit) && isCarico(c))
                .count();
        return totalCarichi - (int) remainingCarichi;
    }
}